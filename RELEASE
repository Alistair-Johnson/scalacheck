ScalaCheck 1.13.0 Release Notes

ScalaCheck is a powerful tool for property-based testing of Scala and Java
programs. It features automatic test case generation and simplification of
failing test cases. ScalaCheck started out as a straightforward Scala port of
the Haskell library QuickCheck, and has since wandered off on its own. Most
features of QuickCheck can be found in ScalaCheck and vice versa, though.

ScalaCheck highlights:

  * Specifications are written in Scala, in a DSL-like fashion using
    combinators from the ScalaCheck library.

  * Properties are tested automatically, with test data generated by
    ScalaCheck. Data generation can be precisely controlled, and generation
    of custom data types is simple to define.

  * Failing test cases are simplified automatically, which makes pin-pointing
    error causes easier.

  * Support for stateful testing of command sequences, and simplification of
    failing command sequences.

  * The ScalaCheck library has no dependencies other than the Scala
    runtime.

  * ScalaCheck is well integrated with ScalaTest, sbt and specs2.

What's new in version 1.13.0?

The major new feature in ScalaCheck 1.13.0 is the Cogen implementation done
by Erik Osheim (non). This implementation enables proper generation of
functions. It also adds a deterministic RNG that is a step in the direction
towards reproducible property evaluations.

Other highlights:

  * The User Guide has been moved from the GitHub wiki to the main ScalaCheck
    repository. This makes it easier to contribute in the form of pull
    requests.

  * The section about stateful testing in the User Guide has been updated
    to correspond to the current implementation.

  * The arbitrary date generator has been updated to generate more realistic
    dates and edge cases.

  * The handling of discarded tests has been slightly changed:

    Previously, ScalaCheck only guaranteed `minSuccessfulTests` total number of
    evaluations. If `maxDiscardRatio` was violated after that, the whole
    property was declared exhausted. However, when `minSuccessfulTests` is
    small, this can be annoying (see #192).

    The new implementation allows at least `minSuccessfulTests * maxDiscardRatio`
    discarded evaluations before stopping.


ScalaCheck links:

  * Official documentation, downloads etc: http://www.scalacheck.org

  * Twitter: @scalacheck

  * Source repository and bug reporting: https://github.com/rickynils/scalacheck

  * SBT dependency

    resolvers ++= Seq(
      "snapshots" at "http://oss.sonatype.org/content/repositories/snapshots",
      "releases"  at "http://oss.sonatype.org/content/repositories/releases"
    )

    libraryDependencies ++= Seq(
      "org.scalacheck" %% "scalacheck" % "1.13.0" % "test"
    )

  * Maven dependency

    Add this to your pom.xml (example for Scala 2.11):

    <repositories>
      <repository>
        <id>oss.sonatype.org</id>
        <name>releases</name>
        <url>http://oss.sonatype.org/content/repositories/releases</url>
      </repository>
      <repository>
        <id>oss.sonatype.org</id>
        <name>snapshots</name>
        <url>http://oss.sonatype.org/content/repositories/snapshots</url>
      </repository>
    </repositories>

    <dependency>
      <groupId>org.scalacheck</groupId>
      <artifactId>scalacheck_2.11</artifactId>
      <version>1.13.0</version>
    </dependency>
